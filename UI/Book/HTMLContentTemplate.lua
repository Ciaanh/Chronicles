--[[
    HTMLContentTemplate.lua
    
    Single HTML container mixin for the new Chronicles book system.
    Displays complete HTML documents generated by HTMLBuilder.
    
    This replaces the multi-template system with a single, unified container
    that can display any type of content through HTML.
]]
local FOLDER_NAME, private = ...

-- =============================================================================================
-- HTML CONTENT MIXIN
-- =============================================================================================

--[[
    Mixin for the new unified HTML content display
    Handles single HTML documents with all content types integrated
]]
HTMLContentMixin = {}

--[[
    Initialize HTML content display with complete HTML document
    @param elementData [table] Element data with complete HTML content
]]
function HTMLContentMixin:Init(elementData)
    if not elementData then
        self:ShowError("No content data provided")
        return
    end

    -- Store current content for reference
    --self.currentContent = elementData

    -- Use htmlContent exclusively
    local htmlContent = elementData.htmlContent
    if not htmlContent or htmlContent == "" then
        self:ShowError("No HTML content provided")
        return
    end

    -- Set the HTML content in the scroll frame
    if self.ScrollFrame and self.ScrollFrame.HTML then
        local htmlContainer = self.ScrollFrame.HTML
        local success =
            pcall(
            function()
                htmlContainer:SetText(htmlContent)
            end
        )

        if not success then
            self:ShowError("Failed to display HTML content")
            return
        else
            print("HTMLContentMixin: Successfully set HTML content")
        end

        -- Calculate and set appropriate height
        --self:UpdateHeight()

        -- Scroll to top
        self.ScrollFrame:SetVerticalScroll(0)

        -- Show the content
        htmlContainer:Show()
        self:Show()
    else
        -- print("HTMLContentMixin: ScrollFrame or HTML component not found")
        self:ShowError("HTML display component not found")
    end
end

--[[
    Update the height of the content based on HTML content
]]
-- function HTMLContentMixin:UpdateHeight()
--     if not self.ScrollFrame or not self.ScrollFrame.HTML then
--         return
--     end

--     -- Try to get content height from HTML component
--     local contentHeight = 550 -- Default height

--     if self.ScrollFrame.HTML.GetContentHeight then
--         local htmlHeight = self.ScrollFrame.HTML:GetContentHeight()
--         if htmlHeight and htmlHeight > 0 then
--             contentHeight = math.min(htmlHeight + 20, 800) -- Add padding, cap at 800
--         end
--     end

--     -- Set dynamic height with reasonable bounds
--     contentHeight = math.max(contentHeight, 200) -- Minimum height
--     contentHeight = math.min(contentHeight, 800) -- Maximum height

--     self:SetHeight(contentHeight)

--     -- Update scroll frame size
--     if self.ScrollFrame then
--         self.ScrollFrame:SetHeight(contentHeight - 10)
--     end
-- end

--[[
    Show an error message when content cannot be displayed
    @param errorMessage [string] Error description
]]
function HTMLContentMixin:ShowError(errorMessage)
    errorMessage = errorMessage or "Unknown error occurred"

    local errorHTML =
        string.format(
        [[
        <html>
        <body style="background-color: #1a1a1a; color: #ff6666; font-family: serif; padding: 20px;">
            <div style="text-align: center; font-size: 16px; font-weight: bold;">
                Error: %s
            </div>
            <div style="text-align: center; font-size: 12px; margin-top: 10px; color: #cccccc;">
                HTML Book System
            </div>
        </body>
        </html>
    ]],
        errorMessage
    )

    if self.ScrollFrame and self.ScrollFrame.HTML then
        self.ScrollFrame.HTML:SetText(errorHTML)
        self:SetHeight(150)
        self:Show()
    end

    self.isLoaded = false
end
